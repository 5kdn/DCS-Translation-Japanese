dictionary = 
{
    ["DictKey_WptName_40"] = "",
    ["DictKey_WptName_52"] = "",
    ["DictKey_WptName_28"] = "",
    ["DictKey_WptName_23"] = "",
    ["DictKey_WptName_8"] = "",
    ["DictKey_UnitName_48"] = "New Static Object #001",
    ["DictKey_descriptionRedTask_2"] = "",
    ["DictKey_WptName_55"] = "",
    ["DictKey_GroupName_33"] = "New Static Object",
    ["DictKey_WptName_21"] = "",
    ["DictKey_WptName_32"] = "",
    ["DictKey_WptName_31"] = "",
    ["DictKey_WptName_18"] = "",
    ["DictKey_UnitName_7"] = "player",
    ["DictKey_GroupName_47"] = "finish",
    ["DictKey_WptName_12"] = "",
    ["DictKey_WptName_26"] = "",
    ["DictKey_WptName_24"] = "",
    ["DictKey_GroupName_50"] = "start",
    ["DictKey_WptName_27"] = "",
    ["DictKey_WptName_14"] = "",
    ["DictKey_WptName_49"] = "",
    ["DictKey_GroupName_53"] = "start #001",
    ["DictKey_GroupName_38"] = "FL",
    ["DictKey_WptName_46"] = "",
    ["DictKey_UnitName_20"] = "Unit #002",
    ["DictKey_WptName_43"] = "",
    ["DictKey_WptName_30"] = "",
    ["DictKey_WptName_13"] = "",
    ["DictKey_UnitName_45"] = "",
    ["DictKey_GroupName_19"] = "track",
    ["DictKey_sortie_5"] = "",
    ["DictKey_WptName_29"] = "",
    ["DictKey_GroupName_44"] = "finish #001",
    ["DictKey_WptName_22"] = "",
    ["DictKey_GroupName_10"] = "SL",
    ["DictKey_UnitName_39"] = "Unit #003",
    ["DictKey_descriptionText_1"] = "フーバーダムからコロラド川を飛び降りて、WP 1のテレビ塔のゲートまで、できるだけ早く行きましょう。\
\
川の上に残れ! 川の真上にいないと5秒ごとにペナルティが課せられます!",
    ["DictKey_UnitName_54"] = "",
    ["DictKey_descriptionBlueTask_3"] = "",
    ["DictKey_GroupName_16"] = "",
    ["DictKey_UnitName_34"] = "",
    ["DictKey_WptName_35"] = "",
    ["DictKey_UnitName_17"] = "",
    ["DictKey_GroupName_6"] = "PlayerAircraft",
    ["DictKey_WptName_9"] = "",
    ["DictKey_UnitName_11"] = "Unit #001",
    ["DictKey_descriptionNeutralsTask_4"] = "",
    ["DictKey_UnitName_51"] = "",
    ["DictKey_WptName_25"] = "",
    ["DictKey_WptName_41"] = "",
    ["DictKey_WptName_15"] = "",
    ["DictKey_WptName_42"] = "",
    ["DictKey_ActionText_37"] = "do\
    local pObj = Unit.getByName('player')\
    local stats = {waterTime = 0, landTime = 0, agl = 0, vel = 0}\
    local pUpdateRate = 0.5 \
    local startLine = mist.getGroupPoints('SL')\
    local finishLine = mist.getGroupPoints('FL')\
    local raceArea = mist.getGroupPoints('track')\
    local zone = trigger.misc.getZone('checkFastNow')\
    local endZone = trigger.misc.getZone('endZone')\
    \
    local active = false\
    local doOnce = false\
    \
    local function reset()\
        pObj = Unit.getByName('player')\
        if pObj and pObj:getLife() > 15 then \
            stats = {waterTime = 0, landTime = 0, agl = 0, vel = 0}\
            active = false\
            doOnce = false\
            trigger.action.outText('統計がリセットされましたので、スタートゲートを通過することで、任意のポイントでレースを再開することができます。', 20)\
        else\
            scheduleFunction(reset, {}, timer.getTime() + 5)\
        end\
    end\
    \
    local function getTimeDisplay(tTime)\
        --env.info('time display: ' .. tTime)\
        local hh, mm, ss, dd, _b = 0 , 0 , 0 , 0, 0\
        hh = math.modf(tTime/3600)\
        mm = math.modf(tTime/60)\
        ss = tTime%60\
        _b, dd = math.modf(ss)\
       -- env.info('HH : '  .. hh .. '  MM : ' .. mm .. '  SS : ' .. ss)\
        return string.format('%02d:%02d:%02d.%03d', mist.utils.round(hh, 0), mist.utils.round(mm, 0), mist.utils.round(ss, 0), dd*1000)\
        \
    end\
    local function displayStats()\
        env.info('display stats')\
        local penalty = mist.utils.round(stats.landTime * 5, 0)\
        local desc = pObj:getDesc()\
        local msg = {}\
        msg[#msg+1] = pObj:getPlayerName()\
        msg[#msg+1] = '\\n ============================================================== \\n'\
        msg[#msg+1] = 'Total Time: '\
        msg[#msg+1] = getTimeDisplay(stats.endTime - stats.startTime)\
        msg[#msg+1] = '\\nEstimated Time Over Water: '\
        msg[#msg+1] = getTimeDisplay(stats.waterTime)\
        msg[#msg+1] = '\\nEstimated Time Over Land: '\
        msg[#msg+1] = getTimeDisplay(stats.landTime)\
        msg[#msg+1] = '\\nLand Penalty: '\
        msg[#msg+1] = penalty\
        msg[#msg+1] = '\\nTotal Time With Penalties: '\
        msg[#msg+1] = getTimeDisplay(stats.endTime - stats.startTime + penalty)\
        \
        msg[#msg+1] = '\\n ============================================================== \\n '\
        msg[#msg+1] = ' Average Altitude AGL : '\
        msg[#msg+1] = mist.utils.round(stats.agl, 3)\
        msg[#msg+1] =  ' meters / '\
        msg[#msg+1] = mist.utils.round(mist.converter('m', 'feet', stats.agl), 3)\
        msg[#msg+1] = ' feet \\n'\
        \
\
        msg[#msg+1] = ' Average Velocity : '\
        msg[#msg+1] = mist.utils.round(stats.vel, 3)\
        msg[#msg+1] =  ' mps / '\
        msg[#msg+1] = mist.utils.round(mist.converter('mps', 'knot', stats.vel), 3)\
        msg[#msg+1] = ' knots \\n'\
        \
        msg[#msg+1] = ' Fuel Used  : '\
        msg[#msg+1] = mist.utils.round((stats.startFuel - stats.endFuel)*desc.fuelMassMax*2.20462, 2)\
        msg[#msg+1] = ' lbs \\n Fuel Remaining : '\
        msg[#msg+1] = mist.utils.round((stats.endFuel)*desc.fuelMassMax*2.20462, 2)\
        msg[#msg+1] = ' lbs'\
        trigger.action.outText(table.concat(msg), 60)\
    end\
    local lastCheck = timer.getAbsTime() \
    local function statsCollect(pos)\
        local timeDif = timer.getAbsTime() - lastCheck\
        if pObj:isExist() == true and stats.startTime and active == true then\
            if land.getSurfaceType({x = pos.x, y = pos.z}) == 3 then\
                stats.waterTime = stats.waterTime + timeDif\
            else\
                stats.landTime = stats.landTime + timeDif\
            end\
            --stats.agl[#stats.agl+1] = pos.y - land.getHeight({x = pos.x, y = pos.z})\
            if timer.getAbsTime() > lastCheck + 0.1 then \
                if stats.agl == 0 then\
                    stats.agl = pos.y - land.getHeight({x = pos.x, y = pos.z})\
                else\
                    stats.agl = (stats.agl + (pos.y - land.getHeight({x = pos.x, y = pos.z})))/2\
                end\
                \
                --stats.vel[#stats.vel+1] = mist.vec.mag(pObj:getVelocity())\
                if stats.vel == 0 then \
                    stats.vel = mist.vec.mag(pObj:getVelocity())\
                else\
                    stats.vel = (stats.vel + mist.vec.mag(pObj:getVelocity()))/2\
                end\
                \
            end    \
            lastCheck = timer.getAbsTime()\
\
        end\
        return\
    end\
    local function main()\
        local pos =  pObj:getPosition().p\
\
        if pos then \
            if active == false then\
               \
                if mist.utils.get2DDist(zone.point, pos) < zone.radius then\
                   -- trigger.action.outText('Checking Zone', 5, true)\
                    if mist.pointInPolygon(pos, startLine) == true and mist.pointInPolygon(pos, raceArea) == true then\
                        pUpdateRate = 0.01\
                        active = true\
                        stats.startTime = timer.getAbsTime()\
                        stats.startFuel = pObj:getFuel()\
                        trigger.action.outText('Start', 5, true)\
                    end\
                end\
            else\
                statsCollect(pos)\
                if mist.utils.get2DDist(endZone.point, pos) < endZone.radius then\
                    if mist.pointInPolygon(pos, finishLine) == true and mist.pointInPolygon(pos, raceArea) == true then\
                        active = false\
                        stats.endTime = timer.getAbsTime()\
                        stats.endFuel = pObj:getFuel()\
                        pUpdateRate = 1\
                        trigger.action.setUserFlag('1', true)\
                        displayStats()\
                    end\
                end\
            end\
          --  env.info(pObj:getLife())\
            if pObj:getLife() < 15 then \
                pUpdateRate = 0.5\
                if doOnce == false then\
                    trigger.action.outText('タイミングスクリプトは、あなたの飛行機を追跡していません。あなたはおそらく死んでいます。リスポーンしてください', 30)\
                    doOnce = true\
                end\
                timer.scheduleFunction(reset, {}, timer.getTime() + 5)\
            end\
        end\
        timer.scheduleFunction(main, {}, timer.getTime() + pUpdateRate)\
    end\
    main()\
    missionCommands.addCommand('Reset Stats/Race', nil, reset)\
end",
} -- end of dictionary
